// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: task_exchange.proto
#ifndef GRPC_task_5fexchange_2eproto__INCLUDED
#define GRPC_task_5fexchange_2eproto__INCLUDED

#include "task_exchange.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace pb {

// 定义 TaskExchange 服务，提供不同类型的任务请求
class TaskExchange final {
 public:
  static constexpr char const* service_full_name() {
    return "pb.TaskExchange";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 请求视频流任务，返回 AI 结果流
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::OnAIResultGotReply>> RequestForStream(::grpc::ClientContext* context, const ::pb::StreamTask& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::OnAIResultGotReply>>(RequestForStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>> AsyncRequestForStream(::grpc::ClientContext* context, const ::pb::StreamTask& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>>(AsyncRequestForStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>> PrepareAsyncRequestForStream(::grpc::ClientContext* context, const ::pb::StreamTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>>(PrepareAsyncRequestForStreamRaw(context, request, cq));
    }
    // 请求文件任务，返回 AI 结果流
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::OnAIResultGotReply>> RequestForFile(::grpc::ClientContext* context, const ::pb::FileTask& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::OnAIResultGotReply>>(RequestForFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>> AsyncRequestForFile(::grpc::ClientContext* context, const ::pb::FileTask& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>>(AsyncRequestForFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>> PrepareAsyncRequestForFile(::grpc::ClientContext* context, const ::pb::FileTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>>(PrepareAsyncRequestForFileRaw(context, request, cq));
    }
    // 请求图片任务，返回 AI 结果
    virtual ::grpc::Status RequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::pb::OnAIResultGotReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::OnAIResultGotReply>> AsyncRequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::OnAIResultGotReply>>(AsyncRequestForImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::OnAIResultGotReply>> PrepareAsyncRequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::OnAIResultGotReply>>(PrepareAsyncRequestForImageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 请求视频流任务，返回 AI 结果流
      virtual void RequestForStream(::grpc::ClientContext* context, const ::pb::StreamTask* request, ::grpc::ClientReadReactor< ::pb::OnAIResultGotReply>* reactor) = 0;
      // 请求文件任务，返回 AI 结果流
      virtual void RequestForFile(::grpc::ClientContext* context, const ::pb::FileTask* request, ::grpc::ClientReadReactor< ::pb::OnAIResultGotReply>* reactor) = 0;
      // 请求图片任务，返回 AI 结果
      virtual void RequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask* request, ::pb::OnAIResultGotReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask* request, ::pb::OnAIResultGotReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::pb::OnAIResultGotReply>* RequestForStreamRaw(::grpc::ClientContext* context, const ::pb::StreamTask& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>* AsyncRequestForStreamRaw(::grpc::ClientContext* context, const ::pb::StreamTask& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>* PrepareAsyncRequestForStreamRaw(::grpc::ClientContext* context, const ::pb::StreamTask& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pb::OnAIResultGotReply>* RequestForFileRaw(::grpc::ClientContext* context, const ::pb::FileTask& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>* AsyncRequestForFileRaw(::grpc::ClientContext* context, const ::pb::FileTask& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::OnAIResultGotReply>* PrepareAsyncRequestForFileRaw(::grpc::ClientContext* context, const ::pb::FileTask& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::OnAIResultGotReply>* AsyncRequestForImageRaw(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::OnAIResultGotReply>* PrepareAsyncRequestForImageRaw(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::pb::OnAIResultGotReply>> RequestForStream(::grpc::ClientContext* context, const ::pb::StreamTask& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::OnAIResultGotReply>>(RequestForStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>> AsyncRequestForStream(::grpc::ClientContext* context, const ::pb::StreamTask& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>>(AsyncRequestForStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>> PrepareAsyncRequestForStream(::grpc::ClientContext* context, const ::pb::StreamTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>>(PrepareAsyncRequestForStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pb::OnAIResultGotReply>> RequestForFile(::grpc::ClientContext* context, const ::pb::FileTask& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::OnAIResultGotReply>>(RequestForFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>> AsyncRequestForFile(::grpc::ClientContext* context, const ::pb::FileTask& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>>(AsyncRequestForFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>> PrepareAsyncRequestForFile(::grpc::ClientContext* context, const ::pb::FileTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>>(PrepareAsyncRequestForFileRaw(context, request, cq));
    }
    ::grpc::Status RequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::pb::OnAIResultGotReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::OnAIResultGotReply>> AsyncRequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::OnAIResultGotReply>>(AsyncRequestForImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::OnAIResultGotReply>> PrepareAsyncRequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::OnAIResultGotReply>>(PrepareAsyncRequestForImageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestForStream(::grpc::ClientContext* context, const ::pb::StreamTask* request, ::grpc::ClientReadReactor< ::pb::OnAIResultGotReply>* reactor) override;
      void RequestForFile(::grpc::ClientContext* context, const ::pb::FileTask* request, ::grpc::ClientReadReactor< ::pb::OnAIResultGotReply>* reactor) override;
      void RequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask* request, ::pb::OnAIResultGotReply* response, std::function<void(::grpc::Status)>) override;
      void RequestForImage(::grpc::ClientContext* context, const ::pb::ImageTask* request, ::pb::OnAIResultGotReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::pb::OnAIResultGotReply>* RequestForStreamRaw(::grpc::ClientContext* context, const ::pb::StreamTask& request) override;
    ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>* AsyncRequestForStreamRaw(::grpc::ClientContext* context, const ::pb::StreamTask& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>* PrepareAsyncRequestForStreamRaw(::grpc::ClientContext* context, const ::pb::StreamTask& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pb::OnAIResultGotReply>* RequestForFileRaw(::grpc::ClientContext* context, const ::pb::FileTask& request) override;
    ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>* AsyncRequestForFileRaw(::grpc::ClientContext* context, const ::pb::FileTask& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::OnAIResultGotReply>* PrepareAsyncRequestForFileRaw(::grpc::ClientContext* context, const ::pb::FileTask& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::OnAIResultGotReply>* AsyncRequestForImageRaw(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::OnAIResultGotReply>* PrepareAsyncRequestForImageRaw(::grpc::ClientContext* context, const ::pb::ImageTask& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestForStream_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestForFile_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestForImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 请求视频流任务，返回 AI 结果流
    virtual ::grpc::Status RequestForStream(::grpc::ServerContext* context, const ::pb::StreamTask* request, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* writer);
    // 请求文件任务，返回 AI 结果流
    virtual ::grpc::Status RequestForFile(::grpc::ServerContext* context, const ::pb::FileTask* request, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* writer);
    // 请求图片任务，返回 AI 结果
    virtual ::grpc::Status RequestForImage(::grpc::ServerContext* context, const ::pb::ImageTask* request, ::pb::OnAIResultGotReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestForStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestForStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestForStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForStream(::grpc::ServerContext* /*context*/, const ::pb::StreamTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestForStream(::grpc::ServerContext* context, ::pb::StreamTask* request, ::grpc::ServerAsyncWriter< ::pb::OnAIResultGotReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestForFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestForFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestForFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForFile(::grpc::ServerContext* /*context*/, const ::pb::FileTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestForFile(::grpc::ServerContext* context, ::pb::FileTask* request, ::grpc::ServerAsyncWriter< ::pb::OnAIResultGotReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestForImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestForImage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestForImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForImage(::grpc::ServerContext* /*context*/, const ::pb::ImageTask* /*request*/, ::pb::OnAIResultGotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestForImage(::grpc::ServerContext* context, ::pb::ImageTask* request, ::grpc::ServerAsyncResponseWriter< ::pb::OnAIResultGotReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestForStream<WithAsyncMethod_RequestForFile<WithAsyncMethod_RequestForImage<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestForStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestForStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::pb::StreamTask, ::pb::OnAIResultGotReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pb::StreamTask* request) { return this->RequestForStream(context, request); }));
    }
    ~WithCallbackMethod_RequestForStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForStream(::grpc::ServerContext* /*context*/, const ::pb::StreamTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::pb::OnAIResultGotReply>* RequestForStream(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::StreamTask* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestForFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestForFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::pb::FileTask, ::pb::OnAIResultGotReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pb::FileTask* request) { return this->RequestForFile(context, request); }));
    }
    ~WithCallbackMethod_RequestForFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForFile(::grpc::ServerContext* /*context*/, const ::pb::FileTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::pb::OnAIResultGotReply>* RequestForFile(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::FileTask* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestForImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestForImage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::pb::ImageTask, ::pb::OnAIResultGotReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pb::ImageTask* request, ::pb::OnAIResultGotReply* response) { return this->RequestForImage(context, request, response); }));}
    void SetMessageAllocatorFor_RequestForImage(
        ::grpc::MessageAllocator< ::pb::ImageTask, ::pb::OnAIResultGotReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pb::ImageTask, ::pb::OnAIResultGotReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestForImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForImage(::grpc::ServerContext* /*context*/, const ::pb::ImageTask* /*request*/, ::pb::OnAIResultGotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestForImage(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::ImageTask* /*request*/, ::pb::OnAIResultGotReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestForStream<WithCallbackMethod_RequestForFile<WithCallbackMethod_RequestForImage<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestForStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestForStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestForStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForStream(::grpc::ServerContext* /*context*/, const ::pb::StreamTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestForFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestForFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestForFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForFile(::grpc::ServerContext* /*context*/, const ::pb::FileTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestForImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestForImage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestForImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForImage(::grpc::ServerContext* /*context*/, const ::pb::ImageTask* /*request*/, ::pb::OnAIResultGotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestForStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestForStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestForStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForStream(::grpc::ServerContext* /*context*/, const ::pb::StreamTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestForStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestForFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestForFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestForFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForFile(::grpc::ServerContext* /*context*/, const ::pb::FileTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestForFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestForImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestForImage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestForImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForImage(::grpc::ServerContext* /*context*/, const ::pb::ImageTask* /*request*/, ::pb::OnAIResultGotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestForImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestForStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestForStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->RequestForStream(context, request); }));
    }
    ~WithRawCallbackMethod_RequestForStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForStream(::grpc::ServerContext* /*context*/, const ::pb::StreamTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* RequestForStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestForFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestForFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->RequestForFile(context, request); }));
    }
    ~WithRawCallbackMethod_RequestForFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForFile(::grpc::ServerContext* /*context*/, const ::pb::FileTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* RequestForFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestForImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestForImage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestForImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestForImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestForImage(::grpc::ServerContext* /*context*/, const ::pb::ImageTask* /*request*/, ::pb::OnAIResultGotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestForImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestForImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestForImage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb::ImageTask, ::pb::OnAIResultGotReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pb::ImageTask, ::pb::OnAIResultGotReply>* streamer) {
                       return this->StreamedRequestForImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestForImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestForImage(::grpc::ServerContext* /*context*/, const ::pb::ImageTask* /*request*/, ::pb::OnAIResultGotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestForImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::ImageTask,::pb::OnAIResultGotReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestForImage<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_RequestForStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_RequestForStream() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::pb::StreamTask, ::pb::OnAIResultGotReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::pb::StreamTask, ::pb::OnAIResultGotReply>* streamer) {
                       return this->StreamedRequestForStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_RequestForStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestForStream(::grpc::ServerContext* /*context*/, const ::pb::StreamTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRequestForStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::StreamTask,::pb::OnAIResultGotReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_RequestForFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_RequestForFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::pb::FileTask, ::pb::OnAIResultGotReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::pb::FileTask, ::pb::OnAIResultGotReply>* streamer) {
                       return this->StreamedRequestForFile(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_RequestForFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestForFile(::grpc::ServerContext* /*context*/, const ::pb::FileTask* /*request*/, ::grpc::ServerWriter< ::pb::OnAIResultGotReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRequestForFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::FileTask,::pb::OnAIResultGotReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_RequestForStream<WithSplitStreamingMethod_RequestForFile<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_RequestForStream<WithSplitStreamingMethod_RequestForFile<WithStreamedUnaryMethod_RequestForImage<Service > > > StreamedService;
};

}  // namespace pb


#endif  // GRPC_task_5fexchange_2eproto__INCLUDED
